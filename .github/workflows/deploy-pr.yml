# This workflow is triggered on pull request events (when they are opened, synchronized, or closed).
name: Deploy to Review Environment

on:
  pull_request:
    types: [opened, synchronize, closed]

jobs:
  deploy:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner

    steps:
      # Step 1: Checkout the code from the current branch
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Setup Docker Buildx (extends docker command capabilities)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      # Step 3: Setup the Google Cloud SDK to interact with GCP services
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.PROJECT_ID }}
          service_account_key: ${{ secrets.GCR_JSON_KEY }}
          export_default_credentials: true

      # Step 4: Login to Google Container Registry to store Docker images
      - name: Login to Google Container Registry
        uses: docker/login-action@v1 
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GCR_JSON_KEY }}

      # Step 5: Build and push the Docker image to the Google Container Registry
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: gcr.io/${{ secrets.PROJECT_ID }}/streamlit-app:${{ github.event.pull_request.number }}

      # Step 6: Deploy to Cloud Run, but only if the PR isn't closed
      - name: Deploy to Cloud Run using gcloud
        if: github.event.action != 'closed'
        id: deploy
        run: |
          URL=$(gcloud run deploy streamlit-app-pr-${{ github.event.pull_request.number }} \
            --image gcr.io/${{ secrets.PROJECT_ID }}/streamlit-app:${{ github.event.pull_request.number }} \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --format="value(status.url)")
          echo "DEPLOYED_URL=$URL" >> $GITHUB_ENV

      # Step 7: Run ZAP security scan on the deployed environment, but only if the PR isn't closed
      - name: Run ZAP Scan
        if: github.event.action != 'closed'
        id: zap_scan
        continue-on-error: true
        uses: zaproxy/action-full-scan@v0.5.1
        with:
          target: ${{ env.DEPLOYED_URL }}
          fail_action: true

      # Step 8: Delete the deployed service on Cloud Run when the PR is closed
      - name: Delete service
        if: github.event.action == 'closed'
        run: |
          gcloud run services delete streamlit-app-pr-${{ github.event.pull_request.number }} --platform managed --region us-central1 --quiet
        env:
          GCLOUD_PROJECT_ID: ${{ secrets.PROJECT_ID }}
          GCLOUD_AUTH: ${{ secrets.GCR_JSON_KEY }}
        
      # Step 9: Comment on the PR with the deployed app URL
      - name: Comment PR
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GH_PAT }}  # Use a personal access token to circumvent GITHUB_TOKEN restrictions
          script: |
            const issue_number = context.issue.number;
            const url = '${{ steps.deploy.outputs.url }}';
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: `ðŸš€ Your preview environment has been deployed!\n\nYou can access it here: ${url}`
            });
